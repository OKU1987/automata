institute: "工学部情報学科計算機科学コース"
title: "計算機科学実験及演習4(プログラム検証)"

post:
  subtitle: "レポート提出(2011年度)"

record:
  subtitle: "レポート提出状況(2011年度)"

links:
  - label: "演習ページに戻る"
    uri: "http://www.sato.kuis.kyoto-u.ac.jp/~igarashi/class/isle4/"

requirements:
  report1:
    static:
      - name: comments
        type: text
        value: "ソースコードは.mlファイルとし, コードの説明およびレポート内容をコメントとして書き込むこと"
      - name: build
        type: text
        value: ".mlファイルは#useでそのまま読み込めるようにすること"
  report2:
    static:
      - name: completeness
        type: text
        value: "makeするのに必要なファイルをすべて含めること"
      - name: interface
        type: html
        value: |
          以下のインタフェース仕様を満たすこと
          (<code>ocamlc -i eval.ml</code>等で確認できる)
          <br />
          <ul id="interface"></ul>

    dynamic:
      - target: interface
        default:
          - name: parsing-toplevel
            type: code
            value: "Parsing.toplevel : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Syntax.program"
          - name: eval-eval_decl
            type: code
            value: "Eval.eval_decl : dnval Environment.t -> Syntax.program -> ... * dnval Environment.t * ... "
          - name: eval-eval_exp
            type: code
            value: "Eval.eval_exp : dnval Environment.t -> Syntax.exp -> dnval"
          - name: eval-exval
            type: code
            value: "Eval.exval = IntV of int | BoolV of bool | ProcV of ..."
        Ex.3.5:
          - name: eval-eval_decl
            type: code
            value: "Eval.eval_decl : dnval Environment.t -> Syntax.program -> ... * dnval Environment.t ... "
        Ex.3.7:
          - name: eval-eval_decl
            type: code
            value: "Eval.eval_decl : dnval Environment.t -> Syntax.program -> ... * dnval Environment.t ... "
        Ex.3.16:
          - name: eval-exval
            type: code
            value: "Eval.exval = IntV of int | BoolV of bool | ProcV of ... | ListV of exval list"
  report3:
    static:
      - type: text
        value: "makeするのに必要なファイルをすべて含めること"
      - type: html
        value: |
          以下のインタフェース仕様を満たすこと
          (<code>ocamlc -i typing.ml</code>等で確認できる)
          <br />
          <ul id="interface"></ul>

    dynamic:
      - target: interface
        default:
          - name: parsing-toplevel
            type: code
            value: "Parsing.toplevel : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Syntax.program"
          - name: typing-ty_decl
            type: code
            value: "Typing.ty_decl : Syntax.ty Environment.t -> Syntax.program -> ..."
          - name: typing-ty_exp
            type: code
            value: "Typing.ty_exp : Syntax.ty Environment.t -> Syntax.exp -> ... * Syntax.ty"
          - name: syntax-ty
            type: code
            value: "Syntax.ty = TyInt | TyBool | TyVar of tyvar | TyFun of ty * ty"
        Ex.4.8:
          - name: syntax-ty
            type: code
            value: "Syntax.ty = TyInt | TyBool | TyVar of tyvar | TyFun of ty * ty | TyList of ty"
        Ex.4.9:
          - name: typing-ty_decl
            type: code
            value: "Typing.ty_decl : Syntax.tysc Environment.t -> Syntax.program -> Syntax.tysc Environment.t * ..."
          - name: typing-ty_exp
            type: code
            value: "Typing.ty_exp : Syntax.tysc Environment.t -> Syntax.exp -> ... * Syntax.ty"
