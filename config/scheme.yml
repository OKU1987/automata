scheme:
  - id: report1
    type: manual
    record:
      - field: name
        label: "名前"
      - field: status
        label: "課題1"
        class: status
      - field: unsolved
        label: "未解答の必修問題"
        class: unsolved
      - field: optional
        label: "オプション問題の解答数"
  - id: report2
    type: post
    name: "課題2: インタプリタ作成実験"
    record:
      - field: name
        label: "名前"
      - field: status
        label: "課題2"
        class: status
      - field: unsolved
        label: "未解答の必修問題"
        class: unsolved
      - field: optional1
        label: "★問題の解答数"
      - field: optional2
        label: "★★問題の解答数"
      - field: optional3
        label: "★★★問題の解答数"
  - id: report3
    type: post
    name: "課題3: 型検査・推論器作成実験"
    record:
      - field: name
        label: "名前"
      - field: status
        label: "課題3"
        class: status
      - field: unsolved
        label: "未解答の必修問題"
        class: unsolved
      - field: optional1
        label: "★問題の解答数"
      - field: optional2
        label: "★★問題の解答数"
      - field: optional3
        label: "★★★問題の解答数"

regex: "^Ex((?:\\.\\d+)+)"

report:
  report1:
    Ex.2.6(2):  { required: 1 }
    Ex.2.6(4):  { required: 1 }
    Ex.3.7(1):  { required: 1 }
    Ex.3.7(2):  { required: 1 }
    Ex.3.11(1): { required: 1 }
    Ex.3.11(2): { required: 1 }
    Ex.3.11(3): { required: 1 }
    Ex.3.11(4): { required: 1 }
    Ex.4.1:     { required: 1 }
    Ex.4.4:     { required: 1 }
    Ex.4.5:     { required: 1 }
    Ex.4.7:     { required: 1 }
    Ex.5.3:     { required: 4 }
    Ex.5.6:     { required: 1 }
    Ex.6.2:     { required: 1 }
    Ex.6.6:     { required: 1 }
    Ex.6.9:     { required: 1 }
    Ex.6.10:    { required: 2 }
    Ex.7.2:     { required: 1 }
    Ex.7.4:     { required: 1 }
    Ex.7.6:     { required: 1 }
    Ex.7.8:     { required: 1 }
  report2:
    Ex.3.1:      { required: 1 }
    Ex.3.2:      { level: 2 }
    Ex.3.3:      { level: 1 }
    Ex.3.4:      { required: 1 }
    Ex.3.5:      { level: 2 }
    Ex.3.6:      { level: 2 }
    Ex.3.7:      { level: 2 }
    Ex.3.8:      { required: 1 }
    Ex.3.9:      { level: 2 }
    Ex.3.10:     { level: 1 }
    Ex.3.11:     { level: 1 }
    Ex.3.12:     { level: 1 }
    Ex.3.13:     { level: 1 }
    Ex.3.14:     { required: 1 }
    Ex.3.15:     { level: 2 }
    Ex.3.16:     { level: 2 }
    Ex.3.17:     { level: 1 }
    Ex.3.18:     { level: 1 }
    Ex.3.19:     { level: 3 }
    Ex.3.20:     { level: 2 }
  report3:
    Ex.4.1:      { required: 1 }
    Ex.4.2:      { required: 1 }
    Ex.4.3:      { required: 1 }
    Ex.4.4:      { required: 1 }
    Ex.4.5:      { required: 1 }
    Ex.4.6:      { required: 1 }
    Ex.4.7:      { level: 2 }
    Ex.4.8:      { level: 2 }
    Ex.4.9:      { level: 2 }
    Ex.4.10:     { level: 1 }
    Ex.4.11:     { level: 3 }
    Ex.4.12:     { level: 3 }

requirements:
  report2:
    static:
      - name: completeness
        type: text
        value: "makeするのに必要なファイルをすべて含めること"
      - name: interface
        type: html
        value: |
          以下のインタフェース仕様を満たすこと
          (<code>ocamlc -i eval.ml</code>等で確認できる)
          <br />
          <ul id="interface"></ul>

    dynamic:
      - target: interface
        default:
          - name: parsing-toplevel
            type: code
            value: "Parsing.toplevel : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Syntax.program"
          - name: eval-eval_decl
            type: code
            value: "Eval.eval_decl : dnval Environment.t -> Syntax.program -> ... * dnval Environment.t * ... "
          - name: eval-eval_exp
            type: code
            value: "Eval.eval_exp : dnval Environment.t -> Syntax.exp -> dnval"
          - name: eval-exval
            type: code
            value: "Eval.exval = IntV of int | BoolV of bool | ProcV of ..."
        Ex.3.5:
          - name: eval-eval_decl
            type: code
            value: "Eval.eval_decl : dnval Environment.t -> Syntax.program -> ... * dnval Environment.t ... "
        Ex.3.7:
          - name: eval-eval_decl
            type: code
            value: "Eval.eval_decl : dnval Environment.t -> Syntax.program -> ... * dnval Environment.t ... "
        Ex.3.16:
          - name: eval-exval
            type: code
            value: "Eval.exval = IntV of int | BoolV of bool | ProcV of ... | ListV of exval list"
  report3:
    static:
      - type: text
        value: "makeするのに必要なファイルをすべて含めること"
      - type: html
        value: |
          以下のインタフェース仕様を満たすこと
          (<code>ocamlc -i typing.ml</code>等で確認できる)
          <br />
          <ul id="interface"></ul>

    dynamic:
      - target: interface
        default:
          - name: parsing-toplevel
            type: code
            value: "Parsing.toplevel : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Syntax.program"
          - name: typing-ty_decl
            type: code
            value: "Typing.ty_decl : Syntax.ty Environment.t -> Syntax.program -> ..."
          - name: typing-ty_exp
            type: code
            value: "Typing.ty_exp : Syntax.ty Environment.t -> Syntax.exp -> ... * Syntax.ty"
          - name: syntax-ty
            type: code
            value: "Syntax.ty = TyInt | TyBool | TyVar of tyvar | TyFun of ty * ty"
        Ex.4.8:
          - name: syntax-ty
            type: code
            value: "Syntax.ty = TyInt | TyBool | TyVar of tyvar | TyFun of ty * ty | TyList of ty"
        Ex.4.9:
          - name: typing-ty_decl
            type: code
            value: "Typing.ty_decl : Syntax.tysc Environment.t -> Syntax.program -> Syntax.tysc Environment.t * ..."
          - name: typing-ty_exp
            type: code
            value: "Typing.ty_exp : Syntax.tysc Environment.t -> Syntax.exp -> ... * Syntax.ty"
