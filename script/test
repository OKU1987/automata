#! /usr/bin/env ruby

Dir.chdir(File.dirname(File.expand_path($0)))
$:.unshift('./lib')

require 'time'
require 'etc'
require 'shellwords'

require 'app'
require 'log'

err = {
  :build => '自動コンパイルチェックに失敗しました; 提出要件を満たしているか確認して下さい',
  :build_fatal => '自動コンパイルチェックに失敗しました; TAに問い合わせて下さい',
}

args = $*.dup
$argv = {}; arg=nil
$argv[:help] = %w'-h --help'.any?{|x| $*.delete(x)}
$argv[:id] = $*.reject!{|x|x=~/^--id=(.*)$/&&arg=$1} && arg || $argv[:id]

report_id = $*.shift
user = $*.shift

if $argv[:help] || !report_id || !user
  print <<"EOM"
Usage: #{$0} [-h] [--id=YYYY-MM-DDThh:mm:ss+zzzz] report-id user
EOM
  exit
end

dir = {}
dir[:user]   = App::KADAI + report_id + user
dir[:test]   = dir[:user] + 'test'

# sudo su www-data -c "command args..."
owner = File.stat(dir[:user].to_s).uid
if owner != Process.uid
  args = args.map{|x| "'"+x+"'"}
  cmd = "./#{File.basename($0)} #{args.join(' ')}"
  ret = system(%Q!sudo su #{Etc.getpwuid(owner).name} -c "#{cmd}"!)
  exit(ret ? 0 : 1)
end

log_file = dir[:user][App::FILES[:log]]
log = if $argv[:id]
        Log.new(log_file, Time.parse($argv[:id])).get(:data)
      else
        Log.new(log_file).latest(:data)
      end
time = log['id'] || log['timestamp']

cmd = {}

# ../test/build.rb report_id user post ex...
cmd[:build] = "#{App::FILES[:build]} '#{report_id}' '#{user}' '#{time}'"
cmd[:build] = "#{cmd[:build]} #{log['report'].join(' ').shellescape}"
cmd[:build] = "#{cmd[:build]} > /dev/null 2>#{dir[:user]['build_fatal.log']}"

# ../test/test.rb report_id user post
cmd[:test] = "#{App::FILES[:sandbox]} '#{report_id}' '#{user}' '#{time}'"
cmd[:test] = "#{cmd[:test]} > /dev/null 2>&1 &" # do not wait

begin
  build = nil
  if system("#{cmd[:build]}")
    Log.new(log_file, Time.parse(time)) do |log|
      hash = {
        'status' => 'build:NG',
        'log'    => {
          'error'   => log.build['detail'],
          'message' => err[:build] }
      }

      if log.build['status'] == 'OK'
        build = true
        hash = { 'status' => 'check', 'log' => { 'build'  => 'OK' } }
      end

      log.write_data(hash.merge('timestamp' => log.build['timestamp']))
    end
  else
    raise RuntimeError, err[:build_fatal]
  end

  unless build
    $stderr.puts('build failed')
    exit(1)
  end

  # invoke tester in a sandbox
  unless system(cmd[:test])
    $stderr.puts('test failed')
    exit(2)
  end

rescue => e
  Log.new(log_file, Time.parse(time)) do |log|
    log.write_data('status' => 'NG', 'log' => { 'error' => e.to_s })
  end
end
